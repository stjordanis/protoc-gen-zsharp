// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_source.proto
#pragma warning disable 1591, 0612, 3021, 162
#region Designer generated code

using System;
using System.IO;
using System.Collections.Generic;
using Google.Protobuf;
using global::Zynga.Protobuf.Runtime;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
using zpr = global::Zynga.Protobuf.Runtime;
namespace Zynga.Protobuf.Runtime.EventSource {

  /// <summary>Holder for reflection information generated from event_source.proto</summary>
  public static partial class EventSourceReflection {

    #region Descriptor
    /// <summary>File descriptor for event_source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventSourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJldmVudF9zb3VyY2UucHJvdG8SGmNvbS56eW5nYS5ydW50aW1lLnByb3Rv",
            "YnVmIvQBCglMaXN0RXZlbnQSRwoLbGlzdF9hY3Rpb24YASABKA4yJi5jb20u",
            "enluZ2EucnVudGltZS5wcm90b2J1Zi5MaXN0QWN0aW9uUgpsaXN0QWN0aW9u",
            "EhQKBWluZGV4GAIgASgFUgVpbmRleBJCCgdjb250ZW50GAMgASgLMiguY29t",
            "Lnp5bmdhLnJ1bnRpbWUucHJvdG9idWYuRXZlbnRDb250ZW50Ugdjb250ZW50",
            "EkQKCmV2ZW50X2RhdGEYBCABKAsyJS5jb20uenluZ2EucnVudGltZS5wcm90",
            "b2J1Zi5FdmVudERhdGFSCWV2ZW50RGF0YSLpAQoITWFwRXZlbnQSRAoKbWFw",
            "X2FjdGlvbhgBIAEoDjIlLmNvbS56eW5nYS5ydW50aW1lLnByb3RvYnVmLk1h",
            "cEFjdGlvblIJbWFwQWN0aW9uEjQKA2tleRgCIAEoCzIiLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLk1hcEtleVIDa2V5EhsKCWtleV92YWx1ZRgDIAEo",
            "DFIIa2V5VmFsdWUSRAoKZXZlbnRfZGF0YRgEIAEoCzIlLmNvbS56eW5nYS5y",
            "dW50aW1lLnByb3RvYnVmLkV2ZW50RGF0YVIJZXZlbnREYXRhIlAKD0V2ZW50",
            "U291cmNlUm9vdBI9CgZldmVudHMYASADKAsyJS5jb20uenluZ2EucnVudGlt",
            "ZS5wcm90b2J1Zi5FdmVudERhdGFSBmV2ZW50cyL0AQoJRXZlbnREYXRhEhIK",
            "BHBhdGgYASADKAVSBHBhdGgSPAoDc2V0GAIgASgLMiguY29tLnp5bmdhLnJ1",
            "bnRpbWUucHJvdG9idWYuRXZlbnRDb250ZW50SABSA3NldBJDCgltYXBfZXZl",
            "bnQYAyABKAsyJC5jb20uenluZ2EucnVudGltZS5wcm90b2J1Zi5NYXBFdmVu",
            "dEgAUghtYXBFdmVudBJGCgpsaXN0X2V2ZW50GAQgASgLMiUuY29tLnp5bmdh",
            "LnJ1bnRpbWUucHJvdG9idWYuTGlzdEV2ZW50SABSCWxpc3RFdmVudEIICgZh",
            "Y3Rpb24i/wIKDEV2ZW50Q29udGVudBITCgR1XzMyGAEgASgNSABSA3UzMhIT",
            "CgRpXzMyGAIgASgFSABSA2kzMhITCgRmXzY0GAMgASgGSABSA2Y2NBITCgRm",
            "XzMyGAQgASgHSABSA2YzMhIWCgZzX2ZfNjQYBSABKBBIAFIEc0Y2NBIWCgZz",
            "X2ZfMzIYBiABKA9IAFIEc0YzMhITCgRyXzY0GAcgASgBSABSA3I2NBITCgRy",
            "XzMyGAggASgCSABSA3IzMhIdCglib29sX2RhdGEYCSABKAhIAFIIYm9vbERh",
            "dGESIQoLc3RyaW5nX2RhdGEYCiABKAlIAFIKc3RyaW5nRGF0YRIdCglieXRl",
            "X2RhdGEYCyABKAxIAFIIYnl0ZURhdGESEwoEaV82NBgMIAEoA0gAUgNpNjQS",
            "EwoEdV82NBgNIAEoBEgAUgN1NjQSFgoGc19pXzMyGA4gASgRSABSBHNJMzIS",
            "FgoGc19pXzY0GA8gASgSSABSBHNJNjRCBgoEZGF0YSKwAgoGTWFwS2V5EhMK",
            "BHVfMzIYASABKA1IAFIDdTMyEhMKBGlfMzIYAiABKAVIAFIDaTMyEhMKBGZf",
            "NjQYAyABKAZIAFIDZjY0EhMKBGZfMzIYBCABKAdIAFIDZjMyEhYKBnNfZl82",
            "NBgFIAEoEEgAUgRzRjY0EhYKBnNfZl8zMhgGIAEoD0gAUgRzRjMyEh0KCWJv",
            "b2xfZGF0YRgJIAEoCEgAUghib29sRGF0YRIhCgtzdHJpbmdfZGF0YRgKIAEo",
            "CUgAUgpzdHJpbmdEYXRhEhMKBGlfNjQYDCABKANIAFIDaTY0EhMKBHVfNjQY",
            "DSABKARIAFIDdTY0EhYKBnNfaV8zMhgOIAEoEUgAUgRzSTMyEhYKBnNfaV82",
            "NBgPIAEoEkgAUgRzSTY0QgYKBGRhdGEqlQEKCkxpc3RBY3Rpb24SEAoMVU5L",
            "Tk9XTl9MSVNUEAASDAoIQUREX0xJU1QQARIPCgtSRU1PVkVfTElTVBACEhIK",
            "DlJFTU9WRV9BVF9MSVNUEAMSEAoMUkVQTEFDRV9MSVNUEAQSDwoLSU5TRVJU",
            "X0xJU1QQBRIOCgpDTEVBUl9MSVNUEAYSDwoLVVBEQVRFX0xJU1QQByppCglN",
            "YXBBY3Rpb24SDwoLVU5LTk9XTl9NQVAQABILCgdBRERfTUFQEAESDgoKUkVN",
            "T1ZFX01BUBACEg8KC1JFUExBQ0VfTUFQEAMSDQoJQ0xFQVJfTUFQEAQSDgoK",
            "VVBEQVRFX01BUBAFQkYKEmNvbS56eW5nYS5wcm90b2J1ZkILRXZlbnRTb3Vy",
            "Y2WqAiJaeW5nYS5Qcm90b2J1Zi5SdW50aW1lLkV2ZW50U291cmNlYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Zynga.Protobuf.Runtime.EventSource.ListAction), typeof(global::Zynga.Protobuf.Runtime.EventSource.MapAction), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.ListEvent), global::Zynga.Protobuf.Runtime.EventSource.ListEvent.Parser, new[]{ "ListAction", "Index", "Content", "EventData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.MapEvent), global::Zynga.Protobuf.Runtime.EventSource.MapEvent.Parser, new[]{ "MapAction", "Key", "KeyValue", "EventData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventSourceRoot), global::Zynga.Protobuf.Runtime.EventSource.EventSourceRoot.Parser, new[]{ "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventData), global::Zynga.Protobuf.Runtime.EventSource.EventData.Parser, new[]{ "Path", "Set", "MapEvent", "ListEvent" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.EventContent), global::Zynga.Protobuf.Runtime.EventSource.EventContent.Parser, new[]{ "U32", "I32", "F64", "F32", "SF64", "SF32", "R64", "R32", "BoolData", "StringData", "ByteData", "I64", "U64", "SI32", "SI64" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Zynga.Protobuf.Runtime.EventSource.MapKey), global::Zynga.Protobuf.Runtime.EventSource.MapKey.Parser, new[]{ "U32", "I32", "F64", "F32", "SF64", "SF32", "BoolData", "StringData", "I64", "U64", "SI32", "SI64" }, new[]{ "Data" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ListAction {
    [pbr::OriginalName("UNKNOWN_LIST")] UnknownList = 0,
    [pbr::OriginalName("ADD_LIST")] AddList = 1,
    [pbr::OriginalName("REMOVE_LIST")] RemoveList = 2,
    [pbr::OriginalName("REMOVE_AT_LIST")] RemoveAtList = 3,
    [pbr::OriginalName("REPLACE_LIST")] ReplaceList = 4,
    [pbr::OriginalName("INSERT_LIST")] InsertList = 5,
    [pbr::OriginalName("CLEAR_LIST")] ClearList = 6,
    [pbr::OriginalName("UPDATE_LIST")] UpdateList = 7,
  }

  public enum MapAction {
    [pbr::OriginalName("UNKNOWN_MAP")] UnknownMap = 0,
    [pbr::OriginalName("ADD_MAP")] AddMap = 1,
    [pbr::OriginalName("REMOVE_MAP")] RemoveMap = 2,
    [pbr::OriginalName("REPLACE_MAP")] ReplaceMap = 3,
    [pbr::OriginalName("CLEAR_MAP")] ClearMap = 4,
    [pbr::OriginalName("UPDATE_MAP")] UpdateMap = 5,
  }

  #endregion

  #region Messages
  public sealed partial class ListEvent : pb::IMessage<ListEvent> {
    private static readonly pb::MessageParser<ListEvent> _parser = new pb::MessageParser<ListEvent>(() => new ListEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEvent(ListEvent other) : this() {
      listAction_ = other.listAction_;
      index_ = other.index_;
      content_ = other.content_ != null ? other.Content.Clone() : null;
      eventData_ = other.eventData_ != null ? other.EventData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEvent Clone() {
      return new ListEvent(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "list_action" field.</summary>
    public const int ListActionFieldNumber = 1;
    private global::Zynga.Protobuf.Runtime.EventSource.ListAction listAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.ListAction ListAction {
      get { return listAction_; }
      set {
        listAction_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private global::Zynga.Protobuf.Runtime.EventSource.EventContent content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventContent Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "event_data" field.</summary>
    public const int EventDataFieldNumber = 4;
    private global::Zynga.Protobuf.Runtime.EventSource.EventData eventData_;
    /// <summary>
    /// only used by update action
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventData EventData {
      get { return eventData_; }
      set {
        eventData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListAction != other.ListAction) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(Content, other.Content)) return false;
      if (!object.Equals(EventData, other.EventData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListAction != 0) hash ^= ListAction.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (content_ != null) hash ^= Content.GetHashCode();
      if (eventData_ != null) hash ^= EventData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ListAction);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (content_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Content);
      }
      if (eventData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EventData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ListAction);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (content_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Content);
      }
      if (eventData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListEvent other) {
      if (other == null) {
        return;
      }
      if (other.ListAction != 0) {
        listAction_ = other.ListAction;
      }
      if (other.Index != 0) {
        index_ = other.Index;
      }
      if (other.content_ != null) {
        if (content_ == null) {
          content_ = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
        }
        Content.MergeFrom(other.Content);
      }
      if (other.eventData_ != null) {
        if (eventData_ == null) {
          eventData_ = new global::Zynga.Protobuf.Runtime.EventSource.EventData();
        }
        EventData.MergeFrom(other.EventData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            listAction_ = (global::Zynga.Protobuf.Runtime.EventSource.ListAction) input.ReadEnum();
            break;
          }
          case 16: {
            index_ = input.ReadInt32();
            break;
          }
          case 26: {
            if (content_ == null) {
              content_ = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
            }
            input.ReadMessage(content_);
            break;
          }
          case 34: {
            if (eventData_ == null) {
              eventData_ = new global::Zynga.Protobuf.Runtime.EventSource.EventData();
            }
            input.ReadMessage(eventData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapEvent : pb::IMessage<MapEvent> {
    private static readonly pb::MessageParser<MapEvent> _parser = new pb::MessageParser<MapEvent>(() => new MapEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEvent(MapEvent other) : this() {
      mapAction_ = other.mapAction_;
      key_ = other.key_ != null ? other.Key.Clone() : null;
      keyValue_ = other.keyValue_;
      eventData_ = other.eventData_ != null ? other.EventData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEvent Clone() {
      return new MapEvent(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "map_action" field.</summary>
    public const int MapActionFieldNumber = 1;
    private global::Zynga.Protobuf.Runtime.EventSource.MapAction mapAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.MapAction MapAction {
      get { return mapAction_; }
      set {
        mapAction_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private global::Zynga.Protobuf.Runtime.EventSource.MapKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.MapKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "key_value" field.</summary>
    public const int KeyValueFieldNumber = 3;
    private pb::ByteString keyValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString KeyValue {
      get { return keyValue_; }
      set {
        keyValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_data" field.</summary>
    public const int EventDataFieldNumber = 4;
    private global::Zynga.Protobuf.Runtime.EventSource.EventData eventData_;
    /// <summary>
    /// only used by update action
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventData EventData {
      get { return eventData_; }
      set {
        eventData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapAction != other.MapAction) return false;
      if (!object.Equals(Key, other.Key)) return false;
      if (KeyValue != other.KeyValue) return false;
      if (!object.Equals(EventData, other.EventData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapAction != 0) hash ^= MapAction.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      if (KeyValue.Length != 0) hash ^= KeyValue.GetHashCode();
      if (eventData_ != null) hash ^= EventData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MapAction);
      }
      if (key_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Key);
      }
      if (KeyValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(KeyValue);
      }
      if (eventData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EventData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MapAction);
      }
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (KeyValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyValue);
      }
      if (eventData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapEvent other) {
      if (other == null) {
        return;
      }
      if (other.MapAction != 0) {
        mapAction_ = other.MapAction;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Zynga.Protobuf.Runtime.EventSource.MapKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.KeyValue.Length != 0) {
        keyValue_ = other.KeyValue;
      }
      if (other.eventData_ != null) {
        if (eventData_ == null) {
          eventData_ = new global::Zynga.Protobuf.Runtime.EventSource.EventData();
        }
        EventData.MergeFrom(other.EventData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mapAction_ = (global::Zynga.Protobuf.Runtime.EventSource.MapAction) input.ReadEnum();
            break;
          }
          case 18: {
            if (key_ == null) {
              key_ = new global::Zynga.Protobuf.Runtime.EventSource.MapKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 26: {
            keyValue_ = input.ReadBytes();
            break;
          }
          case 34: {
            if (eventData_ == null) {
              eventData_ = new global::Zynga.Protobuf.Runtime.EventSource.EventData();
            }
            input.ReadMessage(eventData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventSourceRoot : pb::IMessage<EventSourceRoot> {
    private static readonly pb::MessageParser<EventSourceRoot> _parser = new pb::MessageParser<EventSourceRoot>(() => new EventSourceRoot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSourceRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot(EventSourceRoot other) : this() {
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceRoot Clone() {
      return new EventSourceRoot(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Zynga.Protobuf.Runtime.EventSource.EventData> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Zynga.Protobuf.Runtime.EventSource.EventData.Parser);
    private readonly pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData> events_ = new pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Zynga.Protobuf.Runtime.EventSource.EventData> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSourceRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSourceRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSourceRoot other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventData : pb::IMessage<EventData> {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData(EventData other) : this() {
      path_ = other.path_.Clone();
      switch (other.ActionCase) {
        case ActionOneofCase.Set:
          Set = other.Set.Clone();
          break;
        case ActionOneofCase.MapEvent:
          MapEvent = other.MapEvent.Clone();
          break;
        case ActionOneofCase.ListEvent:
          ListEvent = other.ListEvent.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventData Clone() {
      return new EventData(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_path_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> path_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.EventContent Set {
      get { return actionCase_ == ActionOneofCase.Set ? (global::Zynga.Protobuf.Runtime.EventSource.EventContent) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Set;
      }
    }

    /// <summary>Field number for the "map_event" field.</summary>
    public const int MapEventFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.MapEvent MapEvent {
      get { return actionCase_ == ActionOneofCase.MapEvent ? (global::Zynga.Protobuf.Runtime.EventSource.MapEvent) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.MapEvent;
      }
    }

    /// <summary>Field number for the "list_event" field.</summary>
    public const int ListEventFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Zynga.Protobuf.Runtime.EventSource.ListEvent ListEvent {
      get { return actionCase_ == ActionOneofCase.ListEvent ? (global::Zynga.Protobuf.Runtime.EventSource.ListEvent) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ListEvent;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Set = 2,
      MapEvent = 3,
      ListEvent = 4,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!path_.Equals(other.path_)) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (!object.Equals(MapEvent, other.MapEvent)) return false;
      if (!object.Equals(ListEvent, other.ListEvent)) return false;
      if (ActionCase != other.ActionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= path_.GetHashCode();
      if (actionCase_ == ActionOneofCase.Set) hash ^= Set.GetHashCode();
      if (actionCase_ == ActionOneofCase.MapEvent) hash ^= MapEvent.GetHashCode();
      if (actionCase_ == ActionOneofCase.ListEvent) hash ^= ListEvent.GetHashCode();
      hash ^= (int) actionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      path_.WriteTo(output, _repeated_path_codec);
      if (actionCase_ == ActionOneofCase.Set) {
        output.WriteRawTag(18);
        output.WriteMessage(Set);
      }
      if (actionCase_ == ActionOneofCase.MapEvent) {
        output.WriteRawTag(26);
        output.WriteMessage(MapEvent);
      }
      if (actionCase_ == ActionOneofCase.ListEvent) {
        output.WriteRawTag(34);
        output.WriteMessage(ListEvent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += path_.CalculateSize(_repeated_path_codec);
      if (actionCase_ == ActionOneofCase.Set) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (actionCase_ == ActionOneofCase.MapEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapEvent);
      }
      if (actionCase_ == ActionOneofCase.ListEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListEvent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventData other) {
      if (other == null) {
        return;
      }
      path_.Add(other.path_);
      switch (other.ActionCase) {
        case ActionOneofCase.Set:
          if (Set == null) {
            Set = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
          }
          Set.MergeFrom(other.Set);
          break;
        case ActionOneofCase.MapEvent:
          if (MapEvent == null) {
            MapEvent = new global::Zynga.Protobuf.Runtime.EventSource.MapEvent();
          }
          MapEvent.MergeFrom(other.MapEvent);
          break;
        case ActionOneofCase.ListEvent:
          if (ListEvent == null) {
            ListEvent = new global::Zynga.Protobuf.Runtime.EventSource.ListEvent();
          }
          ListEvent.MergeFrom(other.ListEvent);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 18: {
            global::Zynga.Protobuf.Runtime.EventSource.EventContent subBuilder = new global::Zynga.Protobuf.Runtime.EventSource.EventContent();
            if (actionCase_ == ActionOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            action_ = subBuilder;
            actionCase_ = ActionOneofCase.Set;
            break;
          }
          case 26: {
            global::Zynga.Protobuf.Runtime.EventSource.MapEvent subBuilder = new global::Zynga.Protobuf.Runtime.EventSource.MapEvent();
            if (actionCase_ == ActionOneofCase.MapEvent) {
              subBuilder.MergeFrom(MapEvent);
            }
            input.ReadMessage(subBuilder);
            action_ = subBuilder;
            actionCase_ = ActionOneofCase.MapEvent;
            break;
          }
          case 34: {
            global::Zynga.Protobuf.Runtime.EventSource.ListEvent subBuilder = new global::Zynga.Protobuf.Runtime.EventSource.ListEvent();
            if (actionCase_ == ActionOneofCase.ListEvent) {
              subBuilder.MergeFrom(ListEvent);
            }
            input.ReadMessage(subBuilder);
            action_ = subBuilder;
            actionCase_ = ActionOneofCase.ListEvent;
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventContent : pb::IMessage<EventContent> {
    private static readonly pb::MessageParser<EventContent> _parser = new pb::MessageParser<EventContent>(() => new EventContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent(EventContent other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.SF64:
          SF64 = other.SF64;
          break;
        case DataOneofCase.SF32:
          SF32 = other.SF32;
          break;
        case DataOneofCase.R64:
          R64 = other.R64;
          break;
        case DataOneofCase.R32:
          R32 = other.R32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.ByteData:
          ByteData = other.ByteData;
          break;
        case DataOneofCase.I64:
          I64 = other.I64;
          break;
        case DataOneofCase.U64:
          U64 = other.U64;
          break;
        case DataOneofCase.SI32:
          SI32 = other.SI32;
          break;
        case DataOneofCase.SI64:
          SI64 = other.SI64;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventContent Clone() {
      return new EventContent(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "u_32" field.</summary>
    public const int U32FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U32 {
      get { return dataCase_ == DataOneofCase.U32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.U32;
      }
    }

    /// <summary>Field number for the "i_32" field.</summary>
    public const int I32FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I32 {
      get { return dataCase_ == DataOneofCase.I32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.I32;
      }
    }

    /// <summary>Field number for the "f_64" field.</summary>
    public const int F64FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong F64 {
      get { return dataCase_ == DataOneofCase.F64 ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F64;
      }
    }

    /// <summary>Field number for the "f_32" field.</summary>
    public const int F32FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint F32 {
      get { return dataCase_ == DataOneofCase.F32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F32;
      }
    }

    /// <summary>Field number for the "s_f_64" field.</summary>
    public const int SF64FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SF64 {
      get { return dataCase_ == DataOneofCase.SF64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SF64;
      }
    }

    /// <summary>Field number for the "s_f_32" field.</summary>
    public const int SF32FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SF32 {
      get { return dataCase_ == DataOneofCase.SF32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SF32;
      }
    }

    /// <summary>Field number for the "r_64" field.</summary>
    public const int R64FieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double R64 {
      get { return dataCase_ == DataOneofCase.R64 ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.R64;
      }
    }

    /// <summary>Field number for the "r_32" field.</summary>
    public const int R32FieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R32 {
      get { return dataCase_ == DataOneofCase.R32 ? (float) data_ : 0F; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.R32;
      }
    }

    /// <summary>Field number for the "bool_data" field.</summary>
    public const int BoolDataFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolData {
      get { return dataCase_ == DataOneofCase.BoolData ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.BoolData;
      }
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return dataCase_ == DataOneofCase.StringData ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.StringData;
      }
    }

    /// <summary>Field number for the "byte_data" field.</summary>
    public const int ByteDataFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ByteData {
      get { return dataCase_ == DataOneofCase.ByteData ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.ByteData;
      }
    }

    /// <summary>Field number for the "i_64" field.</summary>
    public const int I64FieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long I64 {
      get { return dataCase_ == DataOneofCase.I64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.I64;
      }
    }

    /// <summary>Field number for the "u_64" field.</summary>
    public const int U64FieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U64 {
      get { return dataCase_ == DataOneofCase.U64 ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.U64;
      }
    }

    /// <summary>Field number for the "s_i_32" field.</summary>
    public const int SI32FieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SI32 {
      get { return dataCase_ == DataOneofCase.SI32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SI32;
      }
    }

    /// <summary>Field number for the "s_i_64" field.</summary>
    public const int SI64FieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SI64 {
      get { return dataCase_ == DataOneofCase.SI64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SI64;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      U32 = 1,
      I32 = 2,
      F64 = 3,
      F32 = 4,
      SF64 = 5,
      SF32 = 6,
      R64 = 7,
      R32 = 8,
      BoolData = 9,
      StringData = 10,
      ByteData = 11,
      I64 = 12,
      U64 = 13,
      SI32 = 14,
      SI64 = 15,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (U32 != other.U32) return false;
      if (I32 != other.I32) return false;
      if (F64 != other.F64) return false;
      if (F32 != other.F32) return false;
      if (SF64 != other.SF64) return false;
      if (SF32 != other.SF32) return false;
      if (R64 != other.R64) return false;
      if (R32 != other.R32) return false;
      if (BoolData != other.BoolData) return false;
      if (StringData != other.StringData) return false;
      if (ByteData != other.ByteData) return false;
      if (I64 != other.I64) return false;
      if (U64 != other.U64) return false;
      if (SI32 != other.SI32) return false;
      if (SI64 != other.SI64) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.U32) hash ^= U32.GetHashCode();
      if (dataCase_ == DataOneofCase.I32) hash ^= I32.GetHashCode();
      if (dataCase_ == DataOneofCase.F64) hash ^= F64.GetHashCode();
      if (dataCase_ == DataOneofCase.F32) hash ^= F32.GetHashCode();
      if (dataCase_ == DataOneofCase.SF64) hash ^= SF64.GetHashCode();
      if (dataCase_ == DataOneofCase.SF32) hash ^= SF32.GetHashCode();
      if (dataCase_ == DataOneofCase.R64) hash ^= R64.GetHashCode();
      if (dataCase_ == DataOneofCase.R32) hash ^= R32.GetHashCode();
      if (dataCase_ == DataOneofCase.BoolData) hash ^= BoolData.GetHashCode();
      if (dataCase_ == DataOneofCase.StringData) hash ^= StringData.GetHashCode();
      if (dataCase_ == DataOneofCase.ByteData) hash ^= ByteData.GetHashCode();
      if (dataCase_ == DataOneofCase.I64) hash ^= I64.GetHashCode();
      if (dataCase_ == DataOneofCase.U64) hash ^= U64.GetHashCode();
      if (dataCase_ == DataOneofCase.SI32) hash ^= SI32.GetHashCode();
      if (dataCase_ == DataOneofCase.SI64) hash ^= SI64.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.U32) {
        output.WriteRawTag(8);
        output.WriteUInt32(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        output.WriteRawTag(16);
        output.WriteInt32(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        output.WriteRawTag(25);
        output.WriteFixed64(F64);
      }
      if (dataCase_ == DataOneofCase.F32) {
        output.WriteRawTag(37);
        output.WriteFixed32(F32);
      }
      if (dataCase_ == DataOneofCase.SF64) {
        output.WriteRawTag(41);
        output.WriteSFixed64(SF64);
      }
      if (dataCase_ == DataOneofCase.SF32) {
        output.WriteRawTag(53);
        output.WriteSFixed32(SF32);
      }
      if (dataCase_ == DataOneofCase.R64) {
        output.WriteRawTag(57);
        output.WriteDouble(R64);
      }
      if (dataCase_ == DataOneofCase.R32) {
        output.WriteRawTag(69);
        output.WriteFloat(R32);
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        output.WriteRawTag(72);
        output.WriteBool(BoolData);
      }
      if (dataCase_ == DataOneofCase.StringData) {
        output.WriteRawTag(82);
        output.WriteString(StringData);
      }
      if (dataCase_ == DataOneofCase.ByteData) {
        output.WriteRawTag(90);
        output.WriteBytes(ByteData);
      }
      if (dataCase_ == DataOneofCase.I64) {
        output.WriteRawTag(96);
        output.WriteInt64(I64);
      }
      if (dataCase_ == DataOneofCase.U64) {
        output.WriteRawTag(104);
        output.WriteUInt64(U64);
      }
      if (dataCase_ == DataOneofCase.SI32) {
        output.WriteRawTag(112);
        output.WriteSInt32(SI32);
      }
      if (dataCase_ == DataOneofCase.SI64) {
        output.WriteRawTag(120);
        output.WriteSInt64(SI64);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.U32) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.F32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.SF64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.SF32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.R64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.R32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.StringData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      if (dataCase_ == DataOneofCase.ByteData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ByteData);
      }
      if (dataCase_ == DataOneofCase.I64) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(I64);
      }
      if (dataCase_ == DataOneofCase.U64) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(U64);
      }
      if (dataCase_ == DataOneofCase.SI32) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SI32);
      }
      if (dataCase_ == DataOneofCase.SI64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SI64);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventContent other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.SF64:
          SF64 = other.SF64;
          break;
        case DataOneofCase.SF32:
          SF32 = other.SF32;
          break;
        case DataOneofCase.R64:
          R64 = other.R64;
          break;
        case DataOneofCase.R32:
          R32 = other.R32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.ByteData:
          ByteData = other.ByteData;
          break;
        case DataOneofCase.I64:
          I64 = other.I64;
          break;
        case DataOneofCase.U64:
          U64 = other.U64;
          break;
        case DataOneofCase.SI32:
          SI32 = other.SI32;
          break;
        case DataOneofCase.SI64:
          SI64 = other.SI64;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            data_ = input.ReadUInt32();
            dataCase_ = DataOneofCase.U32;
            break;
          }
          case 16: {
            data_ = input.ReadInt32();
            dataCase_ = DataOneofCase.I32;
            break;
          }
          case 25: {
            data_ = input.ReadFixed64();
            dataCase_ = DataOneofCase.F64;
            break;
          }
          case 37: {
            data_ = input.ReadFixed32();
            dataCase_ = DataOneofCase.F32;
            break;
          }
          case 41: {
            data_ = input.ReadSFixed64();
            dataCase_ = DataOneofCase.SF64;
            break;
          }
          case 53: {
            data_ = input.ReadSFixed32();
            dataCase_ = DataOneofCase.SF32;
            break;
          }
          case 57: {
            data_ = input.ReadDouble();
            dataCase_ = DataOneofCase.R64;
            break;
          }
          case 69: {
            data_ = input.ReadFloat();
            dataCase_ = DataOneofCase.R32;
            break;
          }
          case 72: {
            data_ = input.ReadBool();
            dataCase_ = DataOneofCase.BoolData;
            break;
          }
          case 82: {
            data_ = input.ReadString();
            dataCase_ = DataOneofCase.StringData;
            break;
          }
          case 90: {
            data_ = input.ReadBytes();
            dataCase_ = DataOneofCase.ByteData;
            break;
          }
          case 96: {
            data_ = input.ReadInt64();
            dataCase_ = DataOneofCase.I64;
            break;
          }
          case 104: {
            data_ = input.ReadUInt64();
            dataCase_ = DataOneofCase.U64;
            break;
          }
          case 112: {
            data_ = input.ReadSInt32();
            dataCase_ = DataOneofCase.SI32;
            break;
          }
          case 120: {
            data_ = input.ReadSInt64();
            dataCase_ = DataOneofCase.SI64;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapKey : pb::IMessage<MapKey> {
    private static readonly pb::MessageParser<MapKey> _parser = new pb::MessageParser<MapKey>(() => new MapKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Zynga.Protobuf.Runtime.EventSource.EventSourceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapKey(MapKey other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.SF64:
          SF64 = other.SF64;
          break;
        case DataOneofCase.SF32:
          SF32 = other.SF32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.I64:
          I64 = other.I64;
          break;
        case DataOneofCase.U64:
          U64 = other.U64;
          break;
        case DataOneofCase.SI32:
          SI32 = other.SI32;
          break;
        case DataOneofCase.SI64:
          SI64 = other.SI64;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapKey Clone() {
      return new MapKey(this);
    }

    public static bool IsEventSourced = false;

    /// <summary>Field number for the "u_32" field.</summary>
    public const int U32FieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U32 {
      get { return dataCase_ == DataOneofCase.U32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.U32;
      }
    }

    /// <summary>Field number for the "i_32" field.</summary>
    public const int I32FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I32 {
      get { return dataCase_ == DataOneofCase.I32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.I32;
      }
    }

    /// <summary>Field number for the "f_64" field.</summary>
    public const int F64FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong F64 {
      get { return dataCase_ == DataOneofCase.F64 ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F64;
      }
    }

    /// <summary>Field number for the "f_32" field.</summary>
    public const int F32FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint F32 {
      get { return dataCase_ == DataOneofCase.F32 ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.F32;
      }
    }

    /// <summary>Field number for the "s_f_64" field.</summary>
    public const int SF64FieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SF64 {
      get { return dataCase_ == DataOneofCase.SF64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SF64;
      }
    }

    /// <summary>Field number for the "s_f_32" field.</summary>
    public const int SF32FieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SF32 {
      get { return dataCase_ == DataOneofCase.SF32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SF32;
      }
    }

    /// <summary>Field number for the "bool_data" field.</summary>
    public const int BoolDataFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolData {
      get { return dataCase_ == DataOneofCase.BoolData ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.BoolData;
      }
    }

    /// <summary>Field number for the "string_data" field.</summary>
    public const int StringDataFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringData {
      get { return dataCase_ == DataOneofCase.StringData ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.StringData;
      }
    }

    /// <summary>Field number for the "i_64" field.</summary>
    public const int I64FieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long I64 {
      get { return dataCase_ == DataOneofCase.I64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.I64;
      }
    }

    /// <summary>Field number for the "u_64" field.</summary>
    public const int U64FieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong U64 {
      get { return dataCase_ == DataOneofCase.U64 ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.U64;
      }
    }

    /// <summary>Field number for the "s_i_32" field.</summary>
    public const int SI32FieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SI32 {
      get { return dataCase_ == DataOneofCase.SI32 ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SI32;
      }
    }

    /// <summary>Field number for the "s_i_64" field.</summary>
    public const int SI64FieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SI64 {
      get { return dataCase_ == DataOneofCase.SI64 ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.SI64;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      U32 = 1,
      I32 = 2,
      F64 = 3,
      F32 = 4,
      SF64 = 5,
      SF32 = 6,
      BoolData = 9,
      StringData = 10,
      I64 = 12,
      U64 = 13,
      SI32 = 14,
      SI64 = 15,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (U32 != other.U32) return false;
      if (I32 != other.I32) return false;
      if (F64 != other.F64) return false;
      if (F32 != other.F32) return false;
      if (SF64 != other.SF64) return false;
      if (SF32 != other.SF32) return false;
      if (BoolData != other.BoolData) return false;
      if (StringData != other.StringData) return false;
      if (I64 != other.I64) return false;
      if (U64 != other.U64) return false;
      if (SI32 != other.SI32) return false;
      if (SI64 != other.SI64) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.U32) hash ^= U32.GetHashCode();
      if (dataCase_ == DataOneofCase.I32) hash ^= I32.GetHashCode();
      if (dataCase_ == DataOneofCase.F64) hash ^= F64.GetHashCode();
      if (dataCase_ == DataOneofCase.F32) hash ^= F32.GetHashCode();
      if (dataCase_ == DataOneofCase.SF64) hash ^= SF64.GetHashCode();
      if (dataCase_ == DataOneofCase.SF32) hash ^= SF32.GetHashCode();
      if (dataCase_ == DataOneofCase.BoolData) hash ^= BoolData.GetHashCode();
      if (dataCase_ == DataOneofCase.StringData) hash ^= StringData.GetHashCode();
      if (dataCase_ == DataOneofCase.I64) hash ^= I64.GetHashCode();
      if (dataCase_ == DataOneofCase.U64) hash ^= U64.GetHashCode();
      if (dataCase_ == DataOneofCase.SI32) hash ^= SI32.GetHashCode();
      if (dataCase_ == DataOneofCase.SI64) hash ^= SI64.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.U32) {
        output.WriteRawTag(8);
        output.WriteUInt32(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        output.WriteRawTag(16);
        output.WriteInt32(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        output.WriteRawTag(25);
        output.WriteFixed64(F64);
      }
      if (dataCase_ == DataOneofCase.F32) {
        output.WriteRawTag(37);
        output.WriteFixed32(F32);
      }
      if (dataCase_ == DataOneofCase.SF64) {
        output.WriteRawTag(41);
        output.WriteSFixed64(SF64);
      }
      if (dataCase_ == DataOneofCase.SF32) {
        output.WriteRawTag(53);
        output.WriteSFixed32(SF32);
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        output.WriteRawTag(72);
        output.WriteBool(BoolData);
      }
      if (dataCase_ == DataOneofCase.StringData) {
        output.WriteRawTag(82);
        output.WriteString(StringData);
      }
      if (dataCase_ == DataOneofCase.I64) {
        output.WriteRawTag(96);
        output.WriteInt64(I64);
      }
      if (dataCase_ == DataOneofCase.U64) {
        output.WriteRawTag(104);
        output.WriteUInt64(U64);
      }
      if (dataCase_ == DataOneofCase.SI32) {
        output.WriteRawTag(112);
        output.WriteSInt32(SI32);
      }
      if (dataCase_ == DataOneofCase.SI64) {
        output.WriteRawTag(120);
        output.WriteSInt64(SI64);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.U32) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U32);
      }
      if (dataCase_ == DataOneofCase.I32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
      }
      if (dataCase_ == DataOneofCase.F64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.F32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.SF64) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.SF32) {
        size += 1 + 4;
      }
      if (dataCase_ == DataOneofCase.BoolData) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.StringData) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringData);
      }
      if (dataCase_ == DataOneofCase.I64) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(I64);
      }
      if (dataCase_ == DataOneofCase.U64) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(U64);
      }
      if (dataCase_ == DataOneofCase.SI32) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SI32);
      }
      if (dataCase_ == DataOneofCase.SI64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SI64);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapKey other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.U32:
          U32 = other.U32;
          break;
        case DataOneofCase.I32:
          I32 = other.I32;
          break;
        case DataOneofCase.F64:
          F64 = other.F64;
          break;
        case DataOneofCase.F32:
          F32 = other.F32;
          break;
        case DataOneofCase.SF64:
          SF64 = other.SF64;
          break;
        case DataOneofCase.SF32:
          SF32 = other.SF32;
          break;
        case DataOneofCase.BoolData:
          BoolData = other.BoolData;
          break;
        case DataOneofCase.StringData:
          StringData = other.StringData;
          break;
        case DataOneofCase.I64:
          I64 = other.I64;
          break;
        case DataOneofCase.U64:
          U64 = other.U64;
          break;
        case DataOneofCase.SI32:
          SI32 = other.SI32;
          break;
        case DataOneofCase.SI64:
          SI64 = other.SI64;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            data_ = input.ReadUInt32();
            dataCase_ = DataOneofCase.U32;
            break;
          }
          case 16: {
            data_ = input.ReadInt32();
            dataCase_ = DataOneofCase.I32;
            break;
          }
          case 25: {
            data_ = input.ReadFixed64();
            dataCase_ = DataOneofCase.F64;
            break;
          }
          case 37: {
            data_ = input.ReadFixed32();
            dataCase_ = DataOneofCase.F32;
            break;
          }
          case 41: {
            data_ = input.ReadSFixed64();
            dataCase_ = DataOneofCase.SF64;
            break;
          }
          case 53: {
            data_ = input.ReadSFixed32();
            dataCase_ = DataOneofCase.SF32;
            break;
          }
          case 72: {
            data_ = input.ReadBool();
            dataCase_ = DataOneofCase.BoolData;
            break;
          }
          case 82: {
            data_ = input.ReadString();
            dataCase_ = DataOneofCase.StringData;
            break;
          }
          case 96: {
            data_ = input.ReadInt64();
            dataCase_ = DataOneofCase.I64;
            break;
          }
          case 104: {
            data_ = input.ReadUInt64();
            dataCase_ = DataOneofCase.U64;
            break;
          }
          case 112: {
            data_ = input.ReadSInt32();
            dataCase_ = DataOneofCase.SI32;
            break;
          }
          case 120: {
            data_ = input.ReadSInt64();
            dataCase_ = DataOneofCase.SI64;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
